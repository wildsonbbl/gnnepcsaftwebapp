"""
Django settings for gnnepcsaft project.

Generated by 'django-admin startproject' using Django 4.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import json
from pathlib import Path

from decouple import Csv, config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config("GNNEPCSAFT_SECRET_KEY", default="ABCDEFG")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config("GNNEPCSAFT_DEBUG", default=False, cast=bool)

ALLOWED_HOSTS = config(
    "GNNEPCSAFT_ALLOWED_HOSTS",
    default="*,*",
    cast=Csv(),
)


# Application definition

INSTALLED_APPS = [
    "daphne",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.sessions",
    "gnnmodel",
    "debug_toolbar",
    "bootstrap5",
    "fontawesomefree",
    "pwa",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "debug_toolbar.middleware.DebugToolbarMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
]

# Django Channels
CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels.layers.InMemoryChannelLayer",
    },
}


INTERNAL_IPS = [
    # ...
    "127.0.0.1",
    # ...
]


ROOT_URLCONF = "webapp.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

# WSGI_APPLICATION = "webapp.wsgi.application"


ASGI_APPLICATION = "webapp.asgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# DATABASES = {
#     "default": {
#         "ENGINE": "django.db.backends.postgresql",
#         "NAME": os.getenv("DB_NAME"),
#         "USER": os.getenv("DB_USER"),
#         "PASSWORD": os.getenv("DB_PASSWORD"),
#         "HOST": os.getenv("DB_HOST"),
#         "PORT": os.getenv("DB_PORT"),
#     }
# }

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "gnnepcsaft.db",
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"

STATIC_ROOT = BASE_DIR / "productionfiles"

STATICFILES_DIRS = []

MEDIA_ROOT = BASE_DIR / "media"

MEDIA_URL = "/media/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

SECURE_SSL_REDIRECT = False

SESSION_COOKIE_SECURE = True

CSRF_COOKIE_SECURE = True

CSRF_TRUSTED_ORIGINS = config(
    "GNNEPCSAFT_DOMAIN_NAME",
    default="https://*, http://*",
    cast=Csv(),
)


# DJANGO-PWA for manifest.json
PWA_SERVICE_WORKER_PATH = STATIC_ROOT / "js/serviceworker.js"

PWA_APP_NAME = "GNNePCSAFT"
PWA_APP_ID = "/"
PWA_APP_DESCRIPTION = "Thermodynamic Modeling with GNNePCSAFT"
PWA_APP_THEME_COLOR = "#000000"
PWA_APP_BACKGROUND_COLOR = "#f8f9fa"
PWA_APP_DISPLAY = "fullscreen"
PWA_APP_DISPLAY_OVERRIDE = [
    "fullscreen",
    "standalone",
    "browser",
    "window-controls-overlay",
]
PWA_APP_SCOPE = "/"
PWA_APP_ORIENTATION = "any"
PWA_APP_START_URL = "/"
PWA_APP_STATUS_BAR_COLOR = "default"
# Open and read the icons.JSON file
with open(BASE_DIR / "icons.json", "r", encoding="UTF-8") as file:
    data = json.load(file)
PWA_APP_ICONS = data["icons"]
PWA_APP_ICONS_APPLE = data["icons"]
PWA_APP_SPLASH_SCREEN = data["icons"]
PWA_APP_SCREENSHOTS = [
    {
        "src": "/static/images/icons/Screenshot-wide.png",
        "sizes": "2560x1600",
        "type": "image/png",
        "form_factor": "wide",
    },
    {
        "src": "/static/images/icons/Screenshot-wide-2.png",
        "sizes": "2560x1600",
        "type": "image/png",
        "form_factor": "wide",
    },
    {
        "src": "/static/images/icons/Screenshot-wide-3.png",
        "sizes": "2560x1600",
        "type": "image/png",
        "form_factor": "wide",
    },
    {
        "src": "/static/images/icons/Screenshot-narrow.png",
        "sizes": "1290x2796",
        "type": "image/png",
        "form_factor": "narrow",
    },
    {
        "src": "/static/images/icons/Screenshot-narrow-2.png",
        "sizes": "1290x2796",
        "type": "image/png",
        "form_factor": "narrow",
    },
    {
        "src": "/static/images/icons/Screenshot-narrow-3.png",
        "sizes": "1290x2796",
        "type": "image/png",
        "form_factor": "narrow",
    },
]
PWA_APP_DIR = "ltr"
PWA_APP_LANG = "en-US"
PWA_APP_EDGE_SIDE_PANEL = {}
PWA_APP_SHORTCUTS = [
    {
        "name": "Offline Mode",
        "short_name": "Off",
        "url": "/offline",
        "description": "Offline Mode access a local database to give the model results.",
        "icons": [
            {
                "src": "/static/images/icons/android/android-launchericon-96-96.png",
                "sizes": "96x96",
            },
            {
                "src": "/static/images/icons/android/android-launchericon-72-72.png",
                "sizes": "72x72",
            },
            {
                "src": "/static/images/icons/android/android-launchericon-48-48.png",
                "sizes": "48x48",
            },
        ],
    },
    {
        "name": "Online Mode",
        "short_name": "On",
        "url": "/",
        "description": "Online Mode access the server to give updated model results.",
        "icons": [
            {
                "src": "/static/images/icons/android/android-launchericon-96-96.png",
                "sizes": "96x96",
            },
            {
                "src": "/static/images/icons/android/android-launchericon-72-72.png",
                "sizes": "72x72",
            },
            {
                "src": "/static/images/icons/android/android-launchericon-48-48.png",
                "sizes": "48x48",
            },
        ],
    },
]
PWA_APP_CATEGORIES = ["education", "productivity", "utilities"]
PWA_APP_LAUNCH_HANDLER = {"client_mode": ["navigate-existing", "auto"]}
PWA_APP_PREFER_RELATED_APPLICATIONS = False
PWA_APP_RELATED_APPLICATIONS = [
    {
        "platform": "python",
        "url": "https://pypi.org/project/pcsaft/",
        "id": "pcsaft",
    },
]
PWA_APP_HANDLE_LINKS = "not-preferred"
